import {
	Autocomplete,
	Button,
	Card,
	Container,
	TextField,
	Typography,
} from "@mui/material";
import { AdapterDayjs } from "@mui/x-date-pickers/AdapterDayjs";
import { DatePicker } from "@mui/x-date-pickers/DatePicker";
import { LocalizationProvider } from "@mui/x-date-pickers/LocalizationProvider";
import Head from "next/head";
import React, { useEffect, useState } from "react";
import Swal from "sweetalert2";

// เพิ่ม import สำหรับ API
import { API } from "../api/subject";

export default function Uploadsub() {
	const [formData, setFormData] = useState({
		title: "",
		content1: "",
		content2: "",
		content3: "",
		orderDate: null,
		dueDate: null,
		subject_id: null,
	});

	const [subjects, setSubjects] = useState([]);

	useEffect(() => {
		async function fetchSubjectData() {
			try {
				const data = await API(); // ใช้ API ที่เราได้จากการ import
				setSubjects(data.subject);
			} catch (error) {
				console.error("Error fetching subjects:", error);
			}
		}

		fetchSubjectData();
	}, []);

	const handleInputChange = (event) => {
		const { id, value } = event.target;
		setFormData((prevFormData) => ({
			...prevFormData,
			[id]: value,
		}));
	};

	const handleDateChange = (date, field) => {
		setFormData((prevFormData) => ({
			...prevFormData,
			[field]: date,
		}));
	};

	const handleSubmit = async (event) => {
		event.preventDefault();

		if (!formData.subject_id) {
			Swal.fire({
				icon: "warning",
				title: "ข้อมูลไม่ครบถ้วน",
				text: "กรุณากรอกข้อมูลให้ครบถ้วนก่อนที่จะส่งข้อมูล",
			});
			return;
		}

		try {
			// ทำอย่างอื่นที่คุณต้องการเมื่อกด Submit ข้อมูล
			// ...

			Swal.fire({
				icon: "success",
				title: "Success",
				text: "ข้อมูลถูกส่งเรียบร้อยแล้ว",
			});
		} catch (error) {
			Swal.fire({
				icon: "error",
				title: "Error",
				text: "เกิดข้อผิดพลาดในการส่งข้อมูล โปรดลองอีกครั้ง",
			});
		}
	};

	return (
		<div>
			<Head>
				<title>Upload</title>
				<meta name="description" content="Generated by create next app" />
				<meta name="viewport" content="width=device-width, initial-scale=1" />
				<link rel="icon" href="/favicon.ico" />
			</Head>

			<Container maxWidth="sm" sx={{ pt: 15, pb: 5 }}>
				<Card className="upload-form">
					<Container sx={{ pt: 5, pb: 3 }}>
						<Typography component="h1" variant="h4" textAlign="center">
							Upload Subject Info
						</Typography>
						<Typography component="h1" variant="h5" textAlign="center">
							ยินดีต้อนรับผู้รับผิดชอบในการ
							อัพโหลดข้อมูลงานที่ได้รับมอบหมายให้เพื่อนใน Section 1 Section 2
						</Typography>
						<Typography component="h1" variant="h5" textAlign="center">
							กรอกข้อมูล รายวิชา
						</Typography>

						<TextField
							type="text"
							margin="normal"
							required
							fullWidth
							id="title"
							label="หัวเรื่อง"
							autoComplete="title"
							autoFocus
							onChange={handleInputChange}
							value={formData.title}
						/>

						<Typography component="h1" variant="h6" textAlign="left">
							งานที่ 1
						</Typography>
						<TextField
							type="text"
							margin="normal"
							required
							fullWidth
							id="content1"
							label="งานที่ 1"
							autoComplete="content1"
							autoFocus
							onChange={handleInputChange}
							value={formData.content1}
						/>

						<Typography component="h1" variant="h6" textAlign="left">
							งานที่ 2
						</Typography>
						<TextField
							type="text"
							margin="normal"
							fullWidth
							id="content2"
							label="งานที่ 2"
							autoComplete="content2"
							onChange={handleInputChange}
							value={formData.content2}
						/>

						<Typography component="h1" variant="h6" textAlign="left">
							งานที่ 3
						</Typography>
						<TextField
							type="text"
							margin="normal"
							fullWidth
							id="content3"
							label="งานที่ 3"
							autoComplete="content3"
							onChange={handleInputChange}
							value={formData.content3}
						/>

						<Typography component="h1" variant="h6" textAlign="left">
							วิชา
						</Typography>
						<Autocomplete
							margin="normal"
							required
							fullWidth
							disablePortal
							id="subject_id"
							value={formData.subject_id}
							options={subjects || []} // ตรวจสอบและกำหนดค่าเริ่มต้นให้เป็น Array ถ้า subjects เป็น undefined
							sx={{ mt: 2 }}
							getOptionLabel={(option) => option.label}
							renderInput={(params) => <TextField {...params} label="วิชา" />}
							onChange={(_e, v) =>
								setFormData((prevFormData) => ({
									...prevFormData,
									subject_id: v ? v.id : null,
								}))
							}
						/>

						<Typography component="h1" variant="h6" textAlign="left">
							วันที่สั่ง
						</Typography>
						<LocalizationProvider dateAdapter={AdapterDayjs}>
							<DatePicker
								value={formData.orderDate}
								onChange={(date) => handleDateChange(date, "orderDate")}
							/>
						</LocalizationProvider>

						<Typography component="h1" variant="h6" textAlign="left">
							กำหนดส่งงานวันที่
						</Typography>
						<LocalizationProvider dateAdapter={AdapterDayjs}>
							<DatePicker
								value={formData.dueDate}
								onChange={(date) => handleDateChange(date, "dueDate")}
							/>
						</LocalizationProvider>

						<Button
							type="submit"
							fullWidth
							variant="contained"
							sx={{ mt: 3, mb: 2 }}
							onClick={handleSubmit}
						>
							อัพโหลดข้อมูล
						</Button>
					</Container>
				</Card>
			</Container>
		</div>
	);
}
