generator client {
   provider   = "prisma-client-js"
   engineType = "library"
   // output     = "./client"
}

datasource db {
   provider = "postgresql"
   url      = env("DATABASE_URL")
}

enum BillingTime {
   once
   week
   month
   year
}

enum BillingType {
   event
   force
   general
   public
}

enum ContentType {
   OnSite
   Online
}

model User {
   id       Int     @id @default(autoincrement())
   title    String?
   username String?
   password String?

   studentList StudentList?
   created_at  DateTime     @default(now())

   @@map("Users")
}

model DiscordWebhook {
   id    BigInt @id
   token String

   billing Billing[]

   @@index(id)
   @@map("Discord Webhook")
}

model Billing {
   id    Int         @id @default(autoincrement())
   types BillingType @default(general)

   name        String
   description String?
   price       Int           @default(0)
   time        BillingTime?
   paid        StudentList[]

   start_at DateTime?
   end_at   DateTime?

   discord_webhook   DiscordWebhook? @relation(fields: [discord_webhookId], references: [id])
   discord_webhookId BigInt?

   @@map("Billings")
}

model StudentList {
   id Int @id @unique

   section Int
   name    String
   status  String?
   paid    Billing[]

   update_at DateTime? @updatedAt

   user   User? @relation(fields: [userId], references: [id])
   userId Int?  @unique

   @@map("Student List")
}

model Subject {
   id         Int    @id @default(autoincrement())
   sec        Int    @default(0)
   coursecode String @default("COM 0000-00")

   title          String?
   instructorName String?
   instructor     Instructor? @relation(fields: [instructorName], references: [name])

   content Content[]
   url     String[]

   image    String?
   updateAt DateTime @updatedAt
}

model Instructor {
   id   Int    @id @default(autoincrement())
   name String @unique

   image   String?
   contact String?

   metadata Subject[]
}

model Content {
   id   Int         @id @default(autoincrement())
   type ContentType @default(OnSite)

   name        String?
   description String?

   startDate String?
   endDate   String?

   createdAt DateTime @default(now())
   updateAt  DateTime @updatedAt

   metadataId Int?
   metadata   Subject? @relation(fields: [metadataId], references: [id])
}
