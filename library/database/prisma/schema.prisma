generator client {
   provider   = "prisma-client-js"
   engineType = "library"
   // output     = "./client"
}

datasource db {
   provider = "postgresql"
   url      = env("DATABASE_URL")
}

enum RoleType {
   developer
   professor
   admin
   user
   viewer
   unknown
}

enum BillingTime {
   once
   week
   month
   year
}

enum BillingType {
   event
   force
   general
   public
}

enum ContentType {
   OnSite
   Online
}

enum PaymentStatusType {
   waiting
   pending_approval
   cancelled
   chargeback
   failed
   succeed
   refunded
}

model User {
   id       String   @id @default(cuid())
   name     String?
   nickname String?
   image    String?
   role     RoleType @default(unknown)

   email         String?   @unique
   emailVerified DateTime?

   accounts Account[]
   sessions Session[]

   studentId Int?
   student   StudentList? @relation(fields: [studentId], references: [id])

   updateAt   DateTime @updatedAt
   created_at DateTime @default(now())

   @@map("Users")
}

model Account {
   id                String  @id @default(cuid())
   userId            String
   type              String
   provider          String
   providerAccountId String
   refresh_token     String? @db.Text
   access_token      String? @db.Text
   expires_at        Int?
   token_type        String?
   scope             String?
   id_token          String? @db.Text
   session_state     String?

   user User @relation(fields: [userId], references: [id], onDelete: Cascade)

   @@unique([provider, providerAccountId])
   @@map("Accounts")
}

model Session {
   id           String   @id @default(cuid())
   sessionToken String   @unique
   expires      DateTime
   userId       String
   user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

   @@map("Sessions")
}

model VerificationToken {
   identifier String
   token      String   @unique
   expires    DateTime

   @@unique([identifier, token])
   @@map("Verification Tokens")
}

model DiscordWebhook {
   id    BigInt @id
   token String

   billing Billing[]

   @@index(id)
   @@map("Discord Webhook")
}

model Billing {
   id    Int         @id @default(autoincrement())
   types BillingType @default(general)

   name        String
   description String?
   price       Int           @default(0)
   time        BillingTime?
   paid        StudentList[]

   start_at DateTime?
   end_at   DateTime?

   payment Payment[]

   discord_webhook   DiscordWebhook? @relation(fields: [discord_webhookId], references: [id])
   discord_webhookId BigInt?

   @@map("Billings")
}

model StudentList {
   id Int @id @unique

   section Int
   name    String
   status  String?
   paid    Billing[]
   payment Payment[]

   connectedUser User[]

   update_at DateTime? @updatedAt

   @@map("Student List")
}

model Subject {
   id         Int    @id @default(autoincrement())
   sec        Int    @default(0)
   coursecode String @default("COM 0000-00")

   title          String?
   instructorName String?
   instructor     Instructor? @relation(fields: [instructorName], references: [name])

   content Content[]
   url     String[]

   image    String?
   updateAt DateTime @updatedAt
}

model Instructor {
   id   Int    @id @default(autoincrement())
   name String @unique

   image   String?
   contact String?

   metadata Subject[]
}

model Content {
   id   Int         @id @default(autoincrement())
   type ContentType @default(OnSite)

   name        String?
   description String?

   startDate String?
   endDate   String?

   createdAt DateTime @default(now())
   updateAt  DateTime @updatedAt

   metadataId Int?
   metadata   Subject? @relation(fields: [metadataId], references: [id])
}

model Payment {
   id String @id @default(cuid())

   amount  Int      @default(0)
   details String?
   slip    String[]

   billing   Billing? @relation(fields: [billingId], references: [id])
   billingId Int?

   student   StudentList? @relation(fields: [studentId], references: [id])
   studentId Int?

   approval   PaymentApproval? @relation(fields: [approvalId], references: [id])
   approvalId String?

   created_at DateTime  @default(now())
   update_at  DateTime? @updatedAt

   @@map("Payment")
}

model PaymentApproval {
   id      String    @id
   payment Payment[]

   description String?
   details     String?
   status      PaymentStatusType @default(waiting)

   by Int?

   created_at DateTime  @default(now())
   update_at  DateTime? @updatedAt

   @@map("Payment Approval")
}
